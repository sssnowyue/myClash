# 机场订阅
proxy-providers:
  Airport1:
    url: "clash_style_sub_links"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🎯Direct

# 节点信息
proxies:
  - {name: 🎯Direct, type: direct}
  - {name: 🛑Reject, type: reject}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29

proxy-groups:
  - {name: ✈️ Airlines, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 🚀 Oversea, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 📹 YouTube, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 🍀 Google, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 🤖 ChatGPT, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 🐬 OneDrive, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 🪟 Microsoft, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 🎵 TikTok, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 📲 Telegram, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 🎥 NETFLIX, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: ✈️ Speedtest, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 💶 PayPal, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 🍎 Apple, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 🪧 Ads, type: select, proxies: [🎯Direct, 🛑Reject]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [🇭🇰HK, 🇯🇵JP, 🇸🇬SG, 🇺🇲US, 🇨🇳TW, 🇰🇷KR, 🇦🇺AU, 🇨🇦CA, 🇫🇷FR, 🇩🇪GE, 🇮🇳IN, 🇷🇺RU, 🇬🇧UK, ♻️ Auto, 🌐 select, 🎯Direct]}
  - {name: 🇭🇰HK, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "港|HK|hk|Hong Kong|HongKong|hongkong"}
  - {name: 🇯🇵JP, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan" }
  - {name: 🇸🇬SG, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "新加坡|坡|狮城|SG|Singapore" }
  - {name: 🇺🇲US, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States"}
  - {name: 🇨🇳TW, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "台|新北|彰化|TW|Taiwan"}
  - {name: 🇰🇷KR, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "KR|Korea|KOR|首尔|韩|韓"}
  - {name: 🇦🇺AU, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "Australia|澳大利亚"}
  - {name: 🇨🇦CA, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "Canada|加拿大"}
  - {name: 🇫🇷FR, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "French|法国"}
  - {name: 🇩🇪GE, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "German|德国"}
  - {name: 🇮🇳IN, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "India|印度"}
  - {name: 🇷🇺RU, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "Russia|俄罗斯"}
  - {name: 🇬🇧UK, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "UK|London|英国|Kingdom"}
  - {name: ♻️ Auto, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(官网|失败|直连|剩余|异常|刷新|登陆|客服|电报)).)*$"}
  - {name: 🌐 select, type: select, include-all: true, filter: "^((?!(官网|失败|直连|剩余|异常|刷新|登陆|客服|电报)).)*$"}

# 规则匹配
rules:
  - RULE-SET,private_domain,🎯Direct
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,airlines,✈️ Airlines
  - RULE-SET,proxylite,🚀 Oversea
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 Oversea
  - RULE-SET,geolocation-!cn,🚀 Oversea
  - RULE-SET,ads_domain,🪧 Ads
  - RULE-SET,cn_domain,🎯Direct
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯Direct
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  airlines: { <<: *class, url: "https://raw.githubusercontent.com/sssnowyue/myClash/refs/heads/main/rules/Airlines.list"}
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  ads_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ads-all.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
