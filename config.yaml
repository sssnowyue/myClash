# 节点信息
proxies:
  - { name: Direct_CONN, type: direct }

# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: "off"
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板，external-ui 路径如果出现报错，根据你使用的插件进行调整，比如openclash改为： /etc/openclash/run  ，裸核跑改为/etc/mihomo/run
# 因容易造成新手面板启动问题，我注释掉了，需要的自行开启
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "/etc/nikki/run"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29

# 出站策略，根据自己情况调整每个策略里分组排序，增删都可以，比如把美国自动放到第一个，比如删除香港故转，注意别漏掉表情逗号等。
# 如果相应分组没有筛选到对应的国家，请根据自己节点名字调整筛选关键字。
# 没有再使用锚点，是考虑很多新手修改难度，这样新手修改某个分组更容易些。
proxy-groups:
  - {
      name: 🚀 DefaultVPN,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, Direct_CONN],
    }
  - {
      name: ✈️ Airlines,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: 📹 YouTube,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: 🍀 Google,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: 🤖 ChatGPT,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: 👨🏿‍💻 GitHub,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: 🐬 OneDrive,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: 🪟 Microsoft,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: 🎵 TikTok,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: 📲 Telegram,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: 🎥 NETFLIX,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: ✈️ Speedtest,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: 💶 PayPal,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - { name: 🍎 Apple, type: select, proxies: [🎯 Direct, 🚀 DefaultVPN] }
  - { name: 🎯 Direct, type: select, proxies: [Direct_CONN, 🚀 DefaultVPN] }
  - {
      name: 🐟 漏网之鱼,
      type: select,
      proxies: [♻️ HK, ♻️ JP, ♻️ SG, ♻️ US, ♻️ Auto, 🌐 Select, 🎯 Direct],
    }
  - {
      name: ♻️ HK,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$",
    }
  - {
      name: ♻️ JP,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$",
    }
  - {
      name: ♻️ SG,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(港|台|韩|日|美)).)*$",
    }
  - {
      name: ♻️ US,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$",
    }
  - {
      name: ♻️ Auto,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "^((?!(直连)).)*$",
    }
  - { name: 🌐 Select, type: select, include-all: true }

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - RULE-SET,private_domain,Direct_CONN
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 DefaultVPN
  - RULE-SET,airlines,✈️ Airlines
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 DefaultVPN
  - RULE-SET,geolocation-!cn,🚀 DefaultVPN
  - RULE-SET,cn_domain,🎯 Direct
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 Direct,no-resolve
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip { type: http, interval: 86400, behavior: ipcidr, format: mrs }
  domain: &domain { type: http, interval: 86400, behavior: domain, format: mrs }
  class:
    &class { type: http, interval: 86400, behavior: classical, format: text }
rule-providers:
  private_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs",
    }
  proxylite:
    {
      <<: *class,
      url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list",
    }
  airlines:
    {
      <<: *class,
      url: "https://raw.githubusercontent.com/sssnowyue/myClash/refs/heads/main/rules/Airlines.list",
    }
  ai:
    {
      <<: *domain,
      url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs",
    }
  youtube_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs",
    }
  google_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs",
    }
  github_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs",
    }
  telegram_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs",
    }
  netflix_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs",
    }
  paypal_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs",
    }
  onedrive_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs",
    }
  microsoft_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs",
    }
  apple_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs",
    }
  speedtest_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs",
    }
  tiktok_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs",
    }
  gfw_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs",
    }
  geolocation-!cn:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs",
    }
  cn_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs",
    }
  cn_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs",
    }
  google_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs",
    }
  telegram_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs",
    }
  netflix_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs",
    }
